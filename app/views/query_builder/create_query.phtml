<? $used_variables = array(); ?>
public function <?= $this->function_name ?>($dbh<?
foreach ($this->variables as $one) {
    echo ', $' . $one;
}
?><? if ($this->pagination_function_enable): ?>,$pageNo,$pageSize<? endif ?>){

try {
$selectColumns =" SELECT ";
<?
foreach ($this->columns as $ind => $one) {
    echo '$selectColumns .="';
    if ($ind !== 0) {
        echo ", ";
    }

    if (empty($one['table_alias'])) {
        if ($this->table_size === 1) {
            $columnName = $one['column_name'];
        } else {
            $columnName = '{$this->' . $one['table_varialbe'] . '}.' . $one['column_name'];
        }
    } else {
        $columnName = "{$one['table_alias']}.{$one['column_name']}";
    }

    $aliasName = $one['alias_name'];
    echo "{$columnName} {$aliasName}\";\n";
}
?>
$queryBase=" FROM ";
<?
foreach ($this->frome_tables as $one) {
    echo '$queryBase.="';
    if (!empty($one['join_type'])) {
        echo $one['join_type'] . " ";
    }
    echo '{' . $one['table_variable'] . '}';

    if (!empty($one['table_alias'])) {
        echo " as {$one['table_alias']}";
    }

    if (!empty($one['logic_string'])) {
        echo " on {$one['logic_string']}";
    }

    echo "\";\n";
}


if (!empty($this->where_claus)) {
    echo '$queryBase.=" ' . "WHERE {$this->where_claus}\";\n";
}
?>



$order_clause="";

<?
if (!empty($this->order_by)) {
    echo '$order_clause .=" ORDER BY ";' . "\n";
    foreach ($this->order_by as $ind => $one) {
        if ($ind !== 0) {
            echo '$order_clause.=", ";' . "\n";
        }

        if ($one['type'] === 'fixed') {
            if (empty($one['table_alias'])) {
                if ($this->table_size === 1) {
                    $columnName = $one['column_name'];
                } else {
                    $columnName = '{$this->' . $one['table_varialbe'] . '}.' . $one['column_name'];
                }
            } else {
                $columnName = "{$one['table_alias']}.{$one['column_name']}";
            }
            echo '$order_clause.="' . $columnName . "\";\n";

            if ($one['desc']) {
                echo '$order_clause.=" DESC";' . "\n";
            }
        } else {
            $used_variables[$one['variable']] = 1;
            $used_variables[$one['desc_variable']] = 1;

            echo '$order_clause.="{$' . $one['variable'] . '}";' . "\n";
            echo '$order_clause.=$' . $one['desc_variable'] . '?" DESC":"";' . "\n";
        }
    }
}
?>

$limit_clause="";

<?
if (!empty($this->limit)) {
    $lstr = " LIMIT {$this->limit['from']} ,{$this->limit['num']}";
    echo '$limit_clause.="' . $lstr . "\";\n";
}
?>

$bind_arr = array();

<?
foreach ($this->variables as $one) {
    if (empty($used_variables[$one])) {
        echo '$bind_arr[\':' . $one . '\']=$' . $one . ";\n";
    }
}
?>

<? if ($this->pagination_function_enable): ?>
    $stmt = $dbh->prepare("SELECT count(*) total ".$queryBase);

    $stmt_rv = $stmt->execute($bind_arr);

    if ($stmt_rv) {

    $total = intval($stmt->fetchColumn());

    $stmt->closeCursor();

    if ($pageSize <= 0) {
    $pageSize = 10;
    }

    if ($total === 0) {
    $totalPage = 0;
    } else {
    $totalPage = intval($total / $pageSize);

    if ($total % $pageNo !== 0) {
    $totalPage++;
    }
    }

    $re = array('total' => $total, 'total_pages' => $totalPage);
    if($pageNo<1){
    $pageNo=1;
    }
    $re['page_no']=$pageNo;

    $pageNo--;
    if($pageNo*$pageSize>$total){
    $re['data']=array();
    }
    else{
    $from=$pageNo*$pageSize;
    $stmt2= $dbh->prepare($selectColumns. $queryBase.$order_clause." limit {$from},{$pageSize}");
    $stmt_rv2 = $stmt2->execute($bind_arr);
    if($stmt_rv2){
    $re['data']=$stmt2->fetchAll();
    $re['fetch_size']=$stmt2->rowCount();
    }
    else{
    $re['data']=false;
    }
    }
    return $re;
    }
    else {
    return false;
    }
<? else: ?>

    $runQuery=$selectColumns . $queryBase . $order_clause . $limit_clause;

    //echo $runQuery."\n";

    $stmt = $dbh->prepare($runQuery);
    $stmt_rv = $stmt->execute($bind_arr);

    if ($stmt_rv) {
    return $stmt->fetchAll();
    }
    else {
    return false;
    }
<? endif ?>
}
catch ( PDOException $x ) {
//$errorMessage="database error: " . $x->getMessage();
throw $x;
}
}
